(*
Locations
=========

The Locations file stores all the TLocation records used in MSI.

The source for Locations.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Locations.simba>`_.

*)

(*
MSI_LoadLocation
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_LoadLocation(Which: Integer): Boolean;

Loads the location 'Which' (sets 'Which' in the MSI_Locations global array).
This procedure should only be called in MSI_LoadAllLocations. 'Which' represents
the location constants MSI uses, which can be found in Globals.simba.

.. note::

  | Author: Coh3n
  | Last Updated: 2 April 2011 by IPwnz

Example:

.. code-block:: pascal

  for i := 0 to High(MSI_Locations) do
    MSI_LoadLocation(i);
*)
 function MSI_LoadLocation(Which: Integer): Boolean;
 begin
   case Which of
     LOC_POWER_SKILL:
       with MSI_Locations[Which] do
       begin
         Name := 'Powerskilling';
         Constant := LOC_POWER_SKILL;
         AtBank := False;
         MinDistance := 30;
       end;
     {
     LOC_VE_IVY:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock Ivy';
         Constant := LOC_VE_IVY;
         AtBank := False;
         Tiles := [Point(3232, 3461)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;
       end;
      }
     LOC_LOST:
       with MSI_Locations[Which] do
       begin
         Name := 'Lost';
         Constant := LOC_LOST;
         AtBank := False;
       end;

     LOC_EV_WELL:
       with MSI_Locations[Which] do
       begin
         Name := 'Edgeville Well';
         Constant := LOC_EV_WELL;
         AtBank := False;
         Tiles := [Point(3085, 3500)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_VE_FOUNTAIN:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock East Fountain';
         Constant := LOC_VE_FOUNTAIN;
         AtBank := False;
         Tiles := [Point(3241, 3434)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_VE_TREES:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock east trees';
         Constant := LOC_VE_TREES;
         AtBank := False;
         Tiles := [Point(3276, 3450)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_VE_OAKS:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock east oaks';
         Constant := LOC_VE_OAKS;
         AtBank := False;
         Tiles := [Point(3279, 3428)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_VE_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock east bank';
         Constant := LOC_VE_BANK;
         AtBank := True;
         Tiles := [Point(3253, 3421)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_VE_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_VE_BANK;

           Reflection := [TPointArray([
               Point(3230, 3217), Point(3242, 3224), Point(3257, 3226),
               Point(3260, 3238), Point(3254, 3250), Point(3251, 3263),
               Point(3242, 3275), Point(3239, 3290), Point(3241, 3306),
               Point(3251, 3317), Point(3264, 3324), Point(3278, 3332),
               Point(3287, 3345), Point(3296, 3356), Point(3296, 3369),
               Point(3294, 3382), Point(3292, 3396), Point(3290, 3409),
               Point(3285, 3422), Point(3277, 3429), Point(3263, 3429),
               Point(3255, 3420)])];
         {
           SPSAreas := ['11_5', '11_4', '11_3'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_VE_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock east mine';
         Constant := LOC_VE_MINE;
         AtBank := False;
         Tiles := [Point(3288, 3368)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 30;
       end;

     LOC_VW_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock west mine';
         Constant := LOC_VW_MINE;
         AtBank := False;
         Tiles := [Point(3181, 3367)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_FW_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Falador west mine';
         Constant := LOC_FW_MINE;
         AtBank := False;
         Tiles := [Point(2907, 3358)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_FW_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Falador west bank';
         Constant := LOC_FW_BANK;
         AtBank := True;
         Tiles := [Point(2945, 3367)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_FW_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_FW_BANK;

           Reflection := [TPointArray([
             Point(3229, 3217), Point(3234, 3223), Point(3226, 3236),
             Point(3219, 3249), Point(3216, 3263), Point(3211, 3276),
             Point(3197, 3280), Point(3184, 3285), Point(3171, 3285),
             Point(3160, 3290), Point(3147, 3294), Point(3131, 3294),
             Point(3117, 3294), Point(3103, 3293), Point(3089, 3289),
             Point(3077, 3280), Point(3064, 3277), Point(3050, 3275),
             Point(3035, 3275), Point(3022, 3276), Point(3009, 3279),
             Point(3007, 3294), Point(3005, 3304), Point(3007, 3317),
             Point(3006, 3331), Point(3007, 3343), Point(3006, 3357),
             Point(2999, 3364), Point(2988, 3372), Point(2977, 3378),
             Point(2962, 3379), Point(2952, 3380), Point(2946, 3368)])];

         {
           SPSAreas := ['11_5', '10_4', '9_4', '8_4'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_MA_MAGICS:
       with MSI_Locations[Which] do
       begin
         Name := 'Magic Training Arena Magic Trees';
         Constant := LOC_MA_MAGICS;
         AtBank := False;
         Tiles := [Point(2702, 3398)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_MA_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Dueling Arena Bank';
         Constant := LOC_MA_BANK;
         AtBank := True;
         Tiles := [Point(2726, 3492)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_MA_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_MA_BANK;
           Reflection := [];
           Obstacles[OBS_LOC_TO] := [];
           Obstacles[OBS_LOC_FROM] := [];
         {
           SPSAreas := [];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_FW_PUMP:
       with MSI_Locations[Which] do
       begin
         Name := 'Falador WaterPump';
         Constant := LOC_FW_PUMP;
         AtBank := False;
         Tiles := [Point(2949, 3382)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_VW_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Varrock west bank';
         Constant := LOC_VW_BANK;
         AtBank := True;
         Tiles := [Point(3187, 3437)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_VW_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_VW_BANK;

           Reflection := [TPointArray([
             Point(3230, 3217), Point(3242, 3224), Point(3257, 3226),
             Point(3260, 3238), Point(3254, 3250), Point(3251, 3263),
             Point(3242, 3275), Point(3239, 3290), Point(3241, 3306),
             Point(3251, 3317), Point(3264, 3324), Point(3278, 3332),
             Point(3287, 3345), Point(3296, 3356), Point(3296, 3369),
             Point(3294, 3382), Point(3292, 3396), Point(3290, 3409),
             Point(3285, 3422), Point(3279, 3429), Point(3264, 3428),
             Point(3252, 3429), Point(3238, 3430), Point(3224, 3429),
             Point(3208, 3429), Point(3194, 3430), Point(3185, 3438)])];

         {
           SPSAreas := ['11_5', '11_4', '11_3', '10_3'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_GE_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Grand Exchange bank';
         Constant := LOC_GE_BANK;
         AtBank := True;
         Tiles := [Point(3180, 3480)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_GE_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_GE_BANK;

           Reflection := [TPointArray([
             Point(3230, 3217), Point(3242, 3224), Point(3257, 3226),
             Point(3260, 3238), Point(3254, 3250), Point(3251, 3263),
             Point(3242, 3275), Point(3239, 3290), Point(3241, 3306),
             Point(3251, 3317), Point(3264, 3324), Point(3278, 3332),
             Point(3287, 3345), Point(3296, 3356), Point(3296, 3369),
             Point(3294, 3382), Point(3292, 3396), Point(3290, 3409),
             Point(3285, 3422), Point(3279, 3429), Point(3264, 3428),
             Point(3252, 3429), Point(3238, 3430), Point(3224, 3429),
             Point(3208, 3429), Point(3194, 3430), Point(3185, 3438),
             Point(3187, 3447), Point(3179, 3450), Point(3168, 3459),
             Point(3165, 3471), Point(3167, 3480), Point(3167, 3489)])];

         {
           SPSAreas := ['11_5', '11_4', '11_3', '10_3', '10_2'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_GE_YEWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Grand Exchange yews';
         Constant := LOC_GE_YEWS;
         AtBank := False;
         Tiles := [Point(3209, 3503), Point(3220, 3502)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_DB_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Draynor Village bank';
         Constant := LOC_DB_BANK;
         AtBank := True;
         Tiles := [Point(3095, 3244)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_DB_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_DB_BANK;

           Reflection := [TPointArray([
             Point(3222, 3216), Point(3213, 3204), Point(3204, 3210),
             Point(3196, 3214), Point(3185, 3217), Point(3175, 3218),
             Point(3163, 3222), Point(3153, 3225), Point(3144, 3224),
             Point(3132, 3225), Point(3120, 3226), Point(3109, 3229),
             Point(3100, 3235), Point(3094, 3242)])];

         {
           SPSAreas := ['11_5', '10_5', '9_5'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_DB_WILLOWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Draynor Village willows';
         Constant := LOC_DB_WILLOWS;
         AtBank := False;
         Tiles := [Point(3087, 3234)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_DB_TREES:
       with MSI_Locations[Which] do
       begin
         Name := 'Draynor Village trees';
         Constant := LOC_DB_TREES;
         AtBank := False;
         Tiles := [Point(3081, 3268)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_DB_OAKS:
       with MSI_Locations[Which] do
       begin
         Name := 'Draynor Village oaks';
         Constant := LOC_DB_OAKS;
         AtBank := False;
         Tiles := [Point(3101, 3244)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_DB_FISH:
       with MSI_Locations[Which] do
       begin
         Name := 'Draynor Village fishing spots';
         Constant := LOC_DB_FISH;
         AtBank := False;
         Tiles := [Point(3087, 3228)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_DB_CLAY:
       with MSI_Locations[Which] do
       begin
         Name := 'Draynor Village Clay Mine';
         Constant := LOC_DB_CLAY;
         AtBank := False;
         Tiles := [Point(3141, 3316)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_RM_YEWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Rimmington Yews';
         Constant := LOC_RM_YEWS;
         AtBank := False;
         Tiles := [Point(2940, 3231), Point(2933, 3227), Point(2928, 3229)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 10;
       end;

     LOC_RM_WILLOWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Rimmington Willows';
         Constant := LOC_RM_WILLOWS;
         AtBank := False;
         Tiles := [Point(2999, 3169)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_RM_MINE_EAST:
       with MSI_Locations[Which] do
       begin
         Name := 'Rimmington east mine';
         Constant := LOC_RM_MINE_EAST;
         AtBank := False;
         Tiles := [Point(2986, 3236)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;
       end;

     LOC_RM_MINE_NORTH:
       with MSI_Locations[Which] do
       begin
         Name := 'Rimmington north mine';
         Constant := LOC_RM_MINE_NORTH;
         AtBank := False;
         Tiles := [Point(2979, 3245)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;
       end;

     LOC_RM_MINE_SOUTH:
       with MSI_Locations[Which] do
       begin
         Name := 'Rimmington south mine';
         Constant := LOC_RM_MINE_SOUTH;
         AtBank := False;
         Tiles := [Point(2983, 3233)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;
       end;

     LOC_RM_MINE_WEST:
       with MSI_Locations[Which] do
       begin
         Name := 'Rimmington west mine';
         Constant := LOC_RM_MINE_WEST;
         AtBank := False;
         Tiles := [Point(2971, 3239)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;
       end;

     LOC_FE_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Falador east bank';
         Constant := LOC_FE_BANK;
         AtBank := True;
         Tiles := [Point(3012, 3354)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_FE_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_FE_BANK;

           Reflection := [TPointArray([
             Point(3229, 3217), Point(3234, 3223), Point(3226, 3236),
             Point(3219, 3249), Point(3216, 3263), Point(3211, 3276),
             Point(3197, 3280), Point(3184, 3285), Point(3171, 3285),
             Point(3160, 3290), Point(3147, 3294), Point(3131, 3294),
             Point(3117, 3294), Point(3103, 3293), Point(3089, 3289),
             Point(3077, 3280), Point(3064, 3277), Point(3050, 3275),
             Point(3035, 3275), Point(3022, 3276), Point(3009, 3279),
             Point(3007, 3294), Point(3005, 3304), Point(3007, 3317),
             Point(3006, 3331), Point(3007, 3343), Point(3006, 3357),
             Point(3012, 3361), Point(3014, 3356)])];

         {
           SPSAreas := ['11_5', '10_4', '9_4'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_PS_WILLOWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Port Sarim willows';
         Constant := LOC_PS_WILLOWS;
         AtBank := False;
         Tiles := [Point(3058, 3253), Point(3063, 3258)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 10;
       end;

     LOC_PS_YEWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Port Sarim yews';
         Constant := LOC_PS_YEWS;
         AtBank := False;
         Tiles := [Point(3053, 3270)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;
       end;

     LOC_PS_DBOX:
       with MSI_Locations[Which] do
       begin
         Name := 'Port Sarim Deposit Box';
         Constant := LOC_PS_DBOX;
         AtBank := True;
         Tiles := [Point(3046, 3235)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_PS_DBOX';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_PS_DBOX;

           Reflection := [TPointArray([
             Point(3222, 3216), Point(3219, 3207), Point(3208, 3203),
             Point(3203, 3214), Point(3194, 3215), Point(3183, 3216),
             Point(3173, 3218), Point(3162, 3221), Point(3152, 3221),
             Point(3143, 3225), Point(3131, 3223), Point(3119, 3221),
             Point(3111, 3225), Point(3106, 3232), Point(3094, 3232),
             Point(3088, 3236), Point(3082, 3240), Point(3075, 3246),
             Point(3073, 3256), Point(3072, 3265), Point(3070, 3275),
             Point(3064, 3266), Point(3063, 3259), Point(3055, 3250),
             Point(3044, 3245), Point(3046, 3234)])];

           SPSAreas := ['11_5', '10_5', '9_5'];
           Color := MSI_Convert2DTilePath(Reflection);
         end;
       end;

     LOC_LSW_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Lumbridge swamp west mine';
         Constant := LOC_LSW_MINE;
         AtBank := False;
         Tiles := [Point(3148, 3147)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 30;
       end;

     LOC_LSE_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Lumbridge swamp east mine';
         Constant := LOC_LSE_MINE;
         AtBank := False;
         Tiles := [Point(3227, 3148)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 30;
       end;

     LOC_LB_SPAWN:
       with MSI_Locations[Which] do
       begin
         Name := 'Lumbridge courtyard';
         Constant := LOC_LB_SPAWN;
         AtBank := False;
         Tiles := [Point(3222, 3218)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 30;
       end;

     LOC_DB_YEWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Draynor Village Yews';
         Constant := LOC_DB_YEWS;
         AtBank := False;
         Tiles := [Point(3153, 3229), Point(3166, 3222), Point(3181, 3227)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 30;
       end;

     LOC_EV_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Edgeville bank';
         Constant := LOC_EV_BANK;
         AtBank := True;
         Tiles := [Point(3093, 3490)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 30;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_EV_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_EV_BANK;

           Reflection := [TPointArray([
             Point(3230, 3217), Point(3242, 3224), Point(3257, 3226),
             Point(3260, 3238), Point(3254, 3250), Point(3251, 3263),
             Point(3242, 3275), Point(3239, 3290), Point(3241, 3306),
             Point(3251, 3317), Point(3264, 3324), Point(3278, 3332),
             Point(3287, 3345), Point(3296, 3356), Point(3296, 3369),
             Point(3294, 3382), Point(3292, 3396), Point(3290, 3409),
             Point(3285, 3422), Point(3279, 3429), Point(3264, 3428),
             Point(3252, 3429), Point(3238, 3430), Point(3224, 3429),
             Point(3208, 3429), Point(3194, 3430), Point(3189, 3429),
             Point(3176, 3428), Point(3164, 3423), Point(3150, 3417),
             Point(3137, 3417), Point(3123, 3417), Point(3112, 3422),
             Point(3099, 3420), Point(3092, 3430), Point(3092, 3441),
             Point(3096, 3453), Point(3099, 3465), Point(3097, 3478),
             Point(3088, 3485), Point(3089, 3492), Point(3093, 3491)])];

         {
           SPSAreas := ['11_5', '10_4', '10_3', '9_3', '9_2'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_EV_YEWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Edgeville yews';
         Constant := LOC_EV_YEWS;
         AtBank := False;
         Tiles := [Point(3087, 3472), Point(3087, 3479)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_BBV_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Barbarian Village mine';
         Constant := LOC_BBV_MINE;
         AtBank := False;
         Tiles := [Point(3079, 3423)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_BBV_FISH:
       with MSI_Locations[Which] do
       begin
         Name := 'Barbarian Village fishing spot';
         Constant := LOC_BBV_FISH;
         AtBank := False;
         Tiles := [Point(3108, 3434), Point(3103, 3426)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_SV_MAGICS:
       with MSI_Locations[Which] do
       begin
         Name := 'Seers Village Magic trees';
         Constant := LOC_SV_MAGICS;
         AtBank := False;
         Tiles := [Point(2702, 3398)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 20;
       end;

     LOC_SV_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Seers Village Bank';
         Constant := LOC_SV_BANK;
         AtBank := True;
         Tiles := [Point(2726, 3492)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_SV_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_SV_BANK;
           Reflection := [];
           Obstacles[OBS_LOC_TO] := [];
           Obstacles[OBS_LOC_FROM] := [];
         {
           SPSAreas := [];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_SV_MAPLES:
       with MSI_Locations[Which] do
       begin
         Name := 'Seers Village Maples';
         Constant := LOC_SV_MAPLES;
         AtBank := False;
         Tiles := [Point(2724, 3502)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_SV_YEWS:
       with MSI_Locations[Which] do
       begin
         Name := 'Seers Village Yews';
         Constant := LOC_SV_YEWS;
         AtBank := False;
         Tiles := [Point(2712, 3462), Point(2706,3463)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 5;
       end;

     LOC_GUILD_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Mining Guild';
         Constant := LOC_GUILD_MINE;
         AtBank := False;
         Tiles := [Point(3035, 9737), Point(3048, 9737)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_CG_MINE:
       with MSI_Locations[Which] do
       begin
         Name := 'Crafting Guild Mine';
         Constant := LOC_CG_MINE;
         AtBank := False;
         Tiles := [Point(2941, 3279), Point(2941, 3287)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 15;
       end;

     LOC_AK_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Al Kharid Bank';
         Constant := LOC_AK_BANK;
         AtBank := True;
         Tiles := [Point(3270, 3165)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_AK_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_AK_BANK;

           Reflection := [TPointArray([
             Point(3223, 3217), Point(3235, 3212), Point(3237, 3201),
             Point(3243, 3191), Point(3242, 3180), Point(3246, 3171),
             Point(3257, 3172), Point(3270, 3174), Point(3270, 3165)])];
         {
           SPSAreas := ['11_5'];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_AK_RANGE:
       with MSI_Locations[Which] do
       begin
         Name := 'Al Kharid Cooking Range';
         Constant := LOC_AK_RANGE;
         AtBank := False;
         Tiles := [Point(3273, 3179)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_AK_MINE_SOUTH:
       with MSI_Locations[Which] do
       begin
         Name := 'Al Kharid Mine South';
         Constant := LOC_AK_MINE_SOUTH;
         AtBank := False;
         Tiles := [Point(3299, 3286)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_AK_MINE_CENTRAL:
       with MSI_Locations[Which] do
       begin
         Name := 'Al Kharid Mine Central';
         Constant := LOC_AK_MINE_CENTRAL;
         AtBank := False;
         Tiles := [Point(3300, 3301)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_AK_MINE_NORTH:
       with MSI_Locations[Which] do
       begin
         Name := 'Al Kharid Mine North';
         Constant := LOC_AK_MINE_NORTH;
         AtBank := False;
         Tiles := [Point(3301, 3313)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_CB_BANK:
       with MSI_Locations[Which] do
       begin
         Name := 'Catherby Bank';
         Constant := LOC_CB_BANK;
         AtBank := True;
         Tiles := [Point(2809, 3442)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;

         with DeathPath do
         begin
           Name := 'LOC_LB_SPAWN to LOC_CB_BANK';
           StartLoc := LOC_LB_SPAWN;
           EndLoc := LOC_CB_BANK;

           Reflection := [];
           Obstacles[OBS_LOC_TO] := [];
           Obstacles[OBS_LOC_FROM] := [];
         {
           SPSAreas := [];
           Color := MSI_Convert2DTilePath(Reflection);
         }
         end;
       end;

     LOC_CB_FISH:
       with MSI_Locations[Which] do
       begin
         Name := 'Catherby Fishing Spots';
         Constant := LOC_CB_FISH;
         AtBank := False;
         Tiles := [Point(2837, 3432), Point(2845, 3430),
                   Point(2853, 3424), Point(2859, 3427)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_KJ_STILES:
       with MSI_Locations[Which] do
       begin
         Name := 'Stiles on Karamja';
         Constant := LOC_KJ_STILES;
         AtBank := False;
         Tiles := [Point(2851, 3141)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;

     LOC_KJ_FISH:
       with MSI_Locations[Which] do
       begin
         Name := 'Karamja Fishing Spot';
         Constant := LOC_KJ_FISH;
         AtBank := False;
         Tiles := [Point(2924, 3175)];
         Points := MSI_ConvertTilePath(Tiles);
         MinDistance := 25;
       end;
   end;

   Result := (MSI_Locations[Which].Name <> '');
 end;

(*
MSI_LoadAllLocations
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_LoadAllLocations;

Loads all the locations into the MSI_Locations array.  This procedure should
only be called in MSI_Setup.

.. note::

  | Author: Coh3n
  | Last Updated: 02 August 2010 by Coh3n

*)
procedure MSI_LoadAllLocations;
var
  i: Integer;
begin
  for i := 0 to High(MSI_Locations) do
    MSI_LoadLocation(i);
end;

(*
MSI_SetPlayerLoc
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetPlayerLoc();

Set's the player's location.  Checks the script's starting and ending locations.
If the player isn't at either, it won't set the player's location.

.. note::

  | Author: NCDS
  | Last Updated: 06 July 2011 by NCDS

Example:

.. code-block:: pascal

  MSI_SetPlayerLoc();
*)
procedure MSI_SetPlayerLoc();
var
  i: Integer;
  locArr: TIntegerArray;
  Script: TScript;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_SetPlayerLoc');

  Script := MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name];
  SetLength(locArr, 2);
  locArr[0] := Script.PathInfo.StartLoc;
  locArr[1] := Script.PathInfo.EndLoc;

  for i := 0 to 1 do
    if (MSI_AtLocation(locArr[i], false)) then
    begin
      MSI_Players[CurrentPlayer].location := locArr[i];
      MSI_Debug('Player''s location: '+MSI_Locations[locArr[i]].name);
      break;
    end else
      if (i = 1) then
        if (not MSI_WalkPath(script.pathInfo, (invCount < 15))) then
          MSI_DeathWalk();

  MSI_CloseHeader('MSI_SetPlayerLoc: Done');
end;

